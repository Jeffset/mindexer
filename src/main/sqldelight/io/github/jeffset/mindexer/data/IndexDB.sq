import kotlin.Boolean;
import kotlin.collections.List;
import kotlin.String;

CREATE TABLE IF NOT EXISTS Artifacts (
    group_id TEXT NOT NULL,
    artifact_id TEXT NOT NULL,
    version TEXT NOT NULL,
    supported_kmp_platforms TEXT AS List<String>,
    is_latest INTEGER AS Boolean,
    PRIMARY KEY (group_id, artifact_id, version)
);

CREATE INDEX IF NOT EXISTS index_db_artifact_id ON Artifacts(artifact_id);

addArtifact:
INSERT INTO Artifacts(group_id, artifact_id, version, supported_kmp_platforms, is_latest)
VALUES (?, ?, ?, ?, ?);

searchRanked:
SELECT *,
      (+(instr(artifact_id, :namePrompt) > 0) * 10000 -- 1) artifact_id contains prompt
       +(instr(group_id, :namePrompt) > 0) * 1000     -- 2) group_id contains prompt
       -length(artifact_id)                           -- 3) shorter matched strings rank higher,
       -length(group_id)) AS rank                     --    as the "matched ratio" is higher.
FROM Artifacts
WHERE rank > 0 AND is_latest
      AND (:platformPrompt IS NULL
           OR supported_kmp_platforms LIKE ('%' || :platformPrompt || '%'))
ORDER BY
    rank DESC,
    version DESC,
    artifact_id ASC;

artifactsCount:
SELECT COUNT(*) FROM Artifacts;

truncate:
DELETE FROM Artifacts;